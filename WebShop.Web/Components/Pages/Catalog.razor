@page "/catalog"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject CatalogApiClient CatalogApi

<PageTitle>Catalog</PageTitle>

<h1>Catalog Items</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (catalog == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <tbody>
            @for (int i = 0; i < catalog.Count; i+=4)
            {
                <tr>
                    @for (int j = i; j < i+4; j++)
                    {
                        @if (j >= catalog.Count)
                        {
                            <td></td> <!-- Empty cell if there are less than 4 items -->
                            continue;
                        }   
                        var item = catalog[j];
                        <td>
                            <div>
                                <p>@item.Name</p>
                                <p>@item.Description</p>
                                <p>@item.Price</p>
                                <p>@item.AvailableStock</p>
                            </div>
                        </td>
                    }
                </tr>
            }
            
        </tbody>
    </table>
}

@code {
    private List<CatalogItem>? catalog;

    protected override async Task OnInitializedAsync()
    {
        catalog = await CatalogApi.GetAllItemsAsync();
    }
}
